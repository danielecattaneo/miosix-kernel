##
## Common code for building the Miosix kernel
##

## KPATH and CONFPATH should be forwarded by the parent Makefile
ifeq ($(KPATH),)
    $(info Error: KPATH not specified)
    $(error Error)
endif
ifeq ($(CONFPATH),)
    $(info Error: CONFPATH not specified)
    $(error Error)
endif

include $(CONFPATH)/config/Makefile.inc

## Includes the miosix base directory for C/C++
## Always include CONFPATH first, as it overrides the config file location
AFLAGS   ?= $(AFLAGS_BASE)
CFLAGS   ?= $(CFLAGS_BASE)   -I$(CONFPATH) -I$(CONFPATH)/config/$(BOARD_INC)  \
            -I. -I$(KPATH) -I$(KPATH)/arch/common -I$(KPATH)/$(ARCH_INC)      \
            -I$(KPATH)/$(BOARD_INC) $(INCLUDE_DIRS) -MMD -MP \
            -DCOMPILING_MIOSIX
CXXFLAGS ?= $(CXXFLAGS_BASE) -I$(CONFPATH) -I$(CONFPATH)/config/$(BOARD_INC)  \
            -I. -I$(KPATH) -I$(KPATH)/arch/common -I$(KPATH)/$(ARCH_INC)      \
            -I$(KPATH)/$(BOARD_INC) $(INCLUDE_DIRS) -MMD -MP \
            -DCOMPILING_MIOSIX
LFLAGS   ?= $(LFLAGS_BASE)
STDLIBS  := -lmiosix -lstdc++ -lc -lm -lgcc -latomic
LINK_LIBS ?= $(LIBS) -L$(KPATH) -Wl,--start-group $(STDLIBS) -Wl,--end-group
TOOLS_DIR := $(KPATH)/_tools

OBJ_DIR ?= obj
OBJ ?= $(patsubst %, $(OBJ_DIR)/%, $(addsuffix .o, $(basename $(SRC))))

SUBDIRS := $(KPATH)
# Not adding libsyscalls to SUBDIRS because it has to be built before
LIBSYS  := $(KPATH)/libsyscalls

.DEFAULT_GOAL := all

image: main $(TOOLS_DIR)/filesystems/buildromfs
	$(ECHO) "[FS  ] romfs.bin"
	$(Q)./$(TOOLS_DIR)/filesystems/buildromfs romfs.bin \
	  --from-directory $(ROMFS_DIR)
	$(ECHO) "[IMG ] image.bin"
	$(Q)perl $(TOOLS_DIR)/filesystems/mkimage.pl image.bin main.bin romfs.bin

$(TOOLS_DIR)/filesystems/buildromfs:
	$(ECHO) "[HOST] buildromfs"
	$(Q)mkdir -p $(TOOLS_DIR)/filesystems/build
	$(Q)cd $(TOOLS_DIR)/filesystems/build         \
	  && cmake --log-level=ERROR .. && $(MAKE) -s

all-recursive: $(if $(POSTLD), $(LIBSYS)/libsyscalls.a)
	$(foreach i,$(SUBDIRS),$(MAKE) -C $(i)                                 \
	  KPATH=$(shell perl $(TOOLS_DIR)/relpath.pl $(i) $(KPATH))            \
	  CONFPATH=$(shell perl $(TOOLS_DIR)/relpath.pl $(i) $(CONFPATH))      \
	  || exit 1;)

$(LIBSYS)/libsyscalls.a:
	$(Q)$(MAKE) -C $(LIBSYS)                                               \
	KPATH=$(shell perl $(TOOLS_DIR)/relpath.pl $(LIBSYS) $(KPATH))         \
	CONFPATH=$(shell perl $(TOOLS_DIR)/relpath.pl $(LIBSYS) $(CONFPATH))   \
	|| exit 1;

clean-recursive:
	$(foreach i,$(SUBDIRS),$(MAKE) -C $(i)                                 \
	  KPATH=$(shell perl $(TOOLS_DIR)/relpath.pl $(i) $(KPATH))            \
	  CONFPATH=$(shell perl $(TOOLS_DIR)/relpath.pl $(i) $(CONFPATH))      \
	  clean || exit 1;)
	$(Q)$(MAKE) -C $(LIBSYS)                                               \
	KPATH=$(shell perl $(TOOLS_DIR)/relpath.pl $(LIBSYS) $(KPATH))         \
	CONFPATH=$(shell perl $(TOOLS_DIR)/relpath.pl $(LIBSYS) $(CONFPATH))   \
	clean || exit 1;
	$(Q)rm -f image.bin romfs.bin $(TOOLS_DIR)/filesystems/buildromfs
	$(Q)rm -rf $(TOOLS_DIR)/filesystems/build

program:
	$(PROG)

$(OBJ_DIR)/%.o : %.cpp | $(OBJ_DIR)
	$(ECHO) "[CXX ] $<"
	$(Q)$(CXX) $(CXXFLAGS) $< -o $@

$(OBJ_DIR)/%.o : %.c | $(OBJ_DIR)
	$(ECHO) "[CC  ] $<"
	$(Q)$(CC)  $(CFLAGS) $< -o $@

$(OBJ_DIR)/%.o: %.s | $(OBJ_DIR)
	$(ECHO) "[AS  ] $<"
	$(Q)$(AS)  $(AFLAGS) $< -o $@

.PHONY: $(OBJ_DIR)
$(OBJ_DIR):
	mkdir -p $(sort $(dir $(OBJ)))

.PHONY: clean_objdir
clean_objdir:
	rm -rf $(OBJ_DIR)

clean: | clean_objdir
